- block:
    - name: Install(apt) mysql necessary packages
      apt: name={{ item }} state=present update_cache=yes
      with_items:
        - mysql-server
      when: ansible_os_family == 'Debian'

    - name: Install(yum) mysql necessary packages
      yum: name={{ item }} state=present update_cache=yes
      with_items:
        - mysql-server
      when: ansible_os_family == 'RedHat'
  environment: '{{ proxy_env | default({}) }}'
  
- name: Set OS-specific variables
  set_fact:
    mysql_config: "/etc/my.cnf"
    mysql_daemon: mysqld
  when: ansible_os_family == 'RedHat'

- name: Initial mysql configuration
  lineinfile: >
    dest="{{ mysql_config }}"
    regexp="{{ item.regexp }}"
    insertafter="{{ item.after }}"
    line="{{ item.line }}"
    state=present
    backup=yes
  with_items:
    - { regexp: '^#?\s*bind-address', line: "bind-address = 0.0.0.0", after: "" }
    - { regexp: '^#?\s*server-id', line: "server-id = {{ groups.mysql.index(inventory_hostname) + 1 }}", after: "" }
    - { regexp: '^#?\s*report-host', line: "report-host = {{ inventory_hostname }}", after: "" }
    - { regexp: '^#?\s*log_bin', line: "log_bin = mysql-bin.log", after: "" }
    - { regexp: '^#?\s*relay-log', line: "relay-log = mysql-relay-bin.log", after: '^#?\s*log_bin' }
#    - { regexp: '^#?\s*binlog-format', line: "binlog-format = ROW", after: "" }
    - { regexp: '^#?\s*log-slave-updates', line: "log-slave-updates = true", after: "" }
    - { regexp: '^#?\s*gtid-mode', line: "gtid-mode = on", after: "" }
    - { regexp: '^#?\s*enforce-gtid-consistency', line: "enforce-gtid-consistency = true", after: "" }
    - { regexp: '^#?\s*master-info-repository', line: "master-info-repository = TABLE", after: "" }
    - { regexp: '^#?\s*relay-log-info-repository', line: "relay-log-info-repository = TABLE", after: "" }
    - { regexp: '^#?\s*sync-master-info', line: "sync-master-info = 1", after: "" }
    - { regexp: '^#?\s*slave-skip-errors', line: "slave-skip-errors = all", after: "" }
    - { regexp: '^#?\s*read-only', line: "read-only = 1", after: "" }
    - { regexp: '^#?\s*key_buffer_size', line: "key_buffer_size = {{ mysql_key_buffer_size }}", after: "" }
    - { regexp: '^#?\s*max_allowed_packet', line: "max_allowed_packet = {{ mysql_max_allowed_packet }}", after: "" }
    - { regexp: '^#?\s*table_open_cache', line: "table_open_cache = {{ mysql_table_open_cache }}", after: "" }
    - { regexp: '^#?\s*sort_buffer_size', line: "sort_buffer_size = {{ mysql_sort_buffer_size }}", after: "" }
    - { regexp: '^#?\s*read_buffer_size', line: "read_buffer_size = {{ mysql_read_buffer_size }}", after: "" }
    - { regexp: '^#?\s*read_rnd_buffer_size', line: "read_rnd_buffer_size = {{ mysql_read_rnd_buffer_size }}", after: "" }
    - { regexp: '^#?\s*myisam_sort_buffer_size', line: "myisam_sort_buffer_size = {{ mysql_myisam_sort_buffer_size }}", after: "" }
    - { regexp: '^#?\s*thread_cache_size', line: "thread_cache_size = {{ mysql_thread_cache_size }}", after: "" }
    - { regexp: '^#?\s*query_cache_type', line: "query_cache_type = {{ mysql_query_cache_type }}", after: "" }
    - { regexp: '^#?\s*query_cache_size', line: "query_cache_size = {{ mysql_query_cache_size }}", after: "" }
    - { regexp: '^#?\s*query_cache_limit', line: "query_cache_limit = {{ mysql_query_cache_limit }}", after: "" }
    - { regexp: '^#?\s*max_connections', line: "max_connections = {{ mysql_max_connections }}", after: "" }
    - { regexp: '^#?\s*tmp_table_size', line: "tmp_table_size = {{ mysql_tmp_table_size }}", after: "" }
    - { regexp: '^#?\s*max_heap_table_size', line: "max_heap_table_size = {{ mysql_max_heap_table_size }}", after: "" }
    - { regexp: '^#?\s*group_concat_max_len', line: "group_concat_max_len = {{ mysql_group_concat_max_len }}", after: "" }
    - { regexp: '^#?\s*join_buffer_size', line: "join_buffer_size = {{ mysql_join_buffer_size }}", after: "" }
    - { regexp: '^#?\s*innodb_large_prefix', line: "innodb_large_prefix = {{ mysql_innodb_large_prefix }}", after: "" }
    - { regexp: '^#?\s*innodb_file_format', line: "innodb_file_format = {{ mysql_innodb_file_format }}", after: "" }
    - { regexp: '^#?\s*innodb_file_per_table', line: "innodb_file_per_table = {{ mysql_innodb_file_per_table }}", after: "" }
    - { regexp: '^#?\s*innodb_buffer_pool_size', line: "innodb_buffer_pool_size = {{ mysql_innodb_buffer_pool_size }}", after: "" }
    - { regexp: '^#?\s*innodb_log_file_size', line: "innodb_log_file_size = {{ mysql_innodb_log_file_size }}", after: "" }
    - { regexp: '^#?\s*innodb_log_buffer_size', line: "innodb_log_buffer_size = {{ mysql_innodb_log_buffer_size }}", after: "" }
    - { regexp: '^#?\s*innodb_flush_log_at_trx_commit', line: "innodb_flush_log_at_trx_commit = {{ mysql_innodb_flush_log_at_trx_commit }}", after: "" }
    - { regexp: '^#?\s*innodb_lock_wait_timeout', line: "innodb_lock_wait_timeout = {{ mysql_innodb_lock_wait_timeout }}", after: "" }
  notify: restart mysql

- name: Force restart mysql
  meta: flush_handlers

- name: Get mysql temporary password for root
  shell: |
    password_match=`awk '/A temporary password is generated for/ {a=$0} END{ print a }' /var/log/mysqld.log | awk '{print $(NF)}'`
    echo $password_match
  register: mysql_temp_pass

- name: Change mysql temporary password
  command: mysql -uroot -p'{{mysql_temp_pass.stdout}}' --connect-expired-password -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ mysql_root_user.password }}'; flush privileges; "
  ignore_errors: yes
  
- name: Ensure root user exists on all instances
  mysql_user:
    name: "{{ mysql_root_user.name }}"
    host: "localhost"
    password: "{{ mysql_root_user.password }}"
    priv: "{{ mysql_root_user.priv | default('*.*:ALL,GRANT') }}"
    state: present
    login_port: "{{ mysql_port }}"
  ignore_errors: yes

- name: Create backup directory
  file:
    path: "{{ backup_dir }}"
    state: directory
    owner: root
    group: root
    mode: 0770

- name: Mysqldump backup
  cron:
    name: "daily backup of all mysql databases"
    minute: "{{ backup_minute }}"
    hour: "{{ backup_hour }}"
    job: "/usr/bin/mysqldump -h 127.0.0.1 -P {{ frontend_mysql_slave_port }} -A -R -E --triggers --single-transaction --add-drop-database --flush-privileges | /bin/gzip > {{ backup_dir }}/mysql_dump_`date +%Y-%m-%d`.sql.gz"
    user: "root"
